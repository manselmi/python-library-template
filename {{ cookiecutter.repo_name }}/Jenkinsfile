// vim: set ft=groovy :


pipeline {
  agent {
    docker {
      image 'quay.io/pypa/manylinux_2_28_x86_64:2024-10-21-dc83211'
      args '--entrypoint=manylinux-entrypoint --user=root:root'
    }
  }
  environment {
    NO_COLOR = '1'
    PIP_PROGRESS_BAR = 'off'
    PIP_ROOT_USER_ACTION = 'ignore'
    PRE_COMMIT_COLOR = 'never'
    TOX_PARALLEL_NO_SPINNER = '1'
    _PATH = "/opt/python/cp313-cp313/bin:/opt/python/cp312-cp312/bin:/opt/python/cp311-cp311/bin:/opt/python/cp310-cp310/bin:/opt/python/cp39-cp39/bin:${env.PATH}"
  }
  options {
    buildDiscarder(logRotator(daysToKeepStr: '7'))
    timeout(time: 15, unit: 'MINUTES')
  }
  stages {
    stage('init') {
      steps {
        sh 'dnf --assumeyes --setopt=install_weak_deps=False -- install git'
        sh 'git config --global --add safe.directory "*"'
        sh 'env -- PATH="${_PATH}" python -m pip install --upgrade -- pip setuptools wheel'
        sh 'env -- PATH="${_PATH}" python -m pip install --upgrade -- build pkginfo pre-commit tox twine'
      }
    }
    stage('build') {
      steps {
        sh 'env -- PATH="${_PATH}" ./build.sh'
      }
    }
    stage('deploy') {
      when {
        branch 'main'
      }
      steps {
        withCredentials([usernamePassword(credentialsId: '00000000-0000-0000-0000-000000000000', passwordVariable: 'TWINE_PASSWORD', usernameVariable: 'TWINE_USERNAME')]) {
          sh 'env -- PATH="${_PATH}" ./deploy.sh'
        }
      }
    }
  }
  post {
    always {
      junit(allowEmptyResults: true, testResults: 'output/report/junit/*.xml')
      cleanWs()
    }
  }
}
